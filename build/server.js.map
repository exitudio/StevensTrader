{"version":3,"sources":["../src/server.js"],"names":["serverRoot","resolve","process","cwd","console","log","app","use","urlencoded","extended","port","env","PORT","listen","listening","readdirSync","forEach","fileName","indexOf","require","dirname","static","join","__dirname","root","get","req","res","sendFile","route"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAGA,IAAMA,aAAa,eAAKC,OAAL,CAAaC,QAAQC,GAAR,EAAb,EAA4B,KAA5B,CAAnB;AACAC,QAAQC,GAAR,CAAY,2BAAyBL,UAArC;AACAI,QAAQC,GAAR,CAAY,uBAAZ;AACA,IAAMC,MAAM,wBAAZ;;AAGAA,IAAIC,GAAJ,CAAQ,qBAAWC,UAAX,CAAsB,EAAM;AAClCC,WAAU;AADkB,CAAtB,CAAR;;AAIA,IAAMC,OAAOR,QAAQS,GAAR,CAAYC,IAAZ,IAAoB,IAAjC;AACAN,IAAIO,MAAJ,CAAWH,IAAX,EAAiBI,SAAjB;AACA,SAASA,SAAT,GAAoB;AACnBV,SAAQC,GAAR,CAAY,uBAAqBK,IAAjC;AACA;;AAED;AACA,aAAGK,WAAH,CAAef,aAAW,WAA1B,EAAuCgB,OAAvC,CAA+C,UAASC,QAAT,EAAkB;AAChE,KAAGA,SAASC,OAAT,CAAiB,KAAjB,IAAwB,CAA3B,EACCZ,IAAIC,GAAJ,CAAQ,WAAR,EAAoBY,QAAQ,gBAAcF,QAAtB,CAApB;AACD,CAHD;;AAUA,aAAGF,WAAH,CAAef,aAAW,SAA1B,EAAqCgB,OAArC,CAA6C,UAASC,QAAT,EAAkB;AAC9D,KAAGA,SAASC,OAAT,CAAiB,KAAjB,IAAwB,CAA3B,EACAZ,IAAIC,GAAJ,CAAQY,QAAQ,cAAYF,QAApB,CAAR;AACA,CAHD;;AAMA;AACA,IAAMG,UAAU,eAAKnB,OAAL,EAAhB,C,CAAgC;AAChCK,IAAIC,GAAJ,CAAQ,kBAAQc,MAAR,CAAe,eAAKC,IAAL,CAAUC,SAAV,EAAqB,WAArB,CAAf,CAAR;AACAjB,IAAIC,GAAJ,CAAQ,yCAAS,oBAAT,EAA+B,EAAEiB,MAAMJ,OAAR,EAA/B,CAAR;AACAd,IAAImB,GAAJ,CAAQ,GAAR,EAAa,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AAChCvB,SAAQC,GAAR,CAAY,YAAWe,OAAvB;AACAO,KAAIC,QAAJ,CAAaC,QAAM,sBAAnB,EAA2C,EAAC,QAAQT,OAAT,EAA3C;AACA,CAHD;;AAKAd,IAAIC,GAAJ,CAAQ,kBAAQc,MAAR,CAAe,eAAKC,IAAL,CAAUC,SAAV,EAAqB,QAArB,CAAf,CAAR;;kBAEejB,G","file":"server.js","sourcesContent":["import fallback from 'express-history-api-fallback'\nimport path from 'path'\nimport express from \"express\"\nimport fs from \"fs\"\nimport bodyParser from 'body-parser'\nimport mongooseInit from './libs/mongoose-init'\n\n\nconst serverRoot = path.resolve(process.cwd(), \"src\")\nconsole.log(\"server root path is : \"+serverRoot)\nconsole.log('server is starting...')\nconst app = express()\n\n\napp.use(bodyParser.urlencoded({     // to support URL-encoded bodies\n  extended: false\n}))\n\nconst port = process.env.PORT || 3000;\napp.listen(port, listening)\nfunction listening(){\n\tconsole.log('listening in port '+port)\n}\n\n//include all the services\nfs.readdirSync(serverRoot+'/services').forEach(function(fileName){\n\tif(fileName.indexOf('.js')>0)\n\t\tapp.use('/services',require('./services/'+fileName))\n})\n\n\n\n\n\n\nfs.readdirSync(serverRoot+'/routes').forEach(function(fileName){\n\tif(fileName.indexOf('.js')>0)\n\tapp.use(require('./routes/'+fileName))\n})\n\n\n//set fallback url to public/index.html\nconst dirname = path.resolve(); // for fixing empty path problem when using gulp\napp.use(express.static(path.join(__dirname, '../public')))\napp.use(fallback('/public/index.html', { root: dirname }))\napp.get('*', function (req, res) {\n\tconsole.log(\"in....:\"+ dirname )\n\tres.sendFile(route+\"../public/index.html\", {\"root\": dirname})\n})\n\napp.use(express.static(path.join(__dirname, 'public')))\n\nexport default app"]}