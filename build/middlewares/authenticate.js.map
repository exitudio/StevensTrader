{"version":3,"sources":["../../src/middlewares/authenticate.js"],"names":["req","res","next","authorizationHeader","headers","token","split","verify","jwtSecret","err","decoded","status","json","error","account","findOne","_id","id","name","email","data","errors","form"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;kBAEe,UAACA,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACjC,MAAMC,sBAAsBH,IAAII,OAAJ,CAAY,eAAZ,CAA5B;AACA,MAAIC,cAAJ;;AAEA,MAAIF,mBAAJ,EAAyB;AACvBE,YAAQF,oBAAoBG,KAApB,CAA0B,GAA1B,EAA+B,CAA/B,CAAR;AACD;;AAED,MAAID,KAAJ,EAAW;AACT,2BAAIE,MAAJ,CAAWF,KAAX,EAAkB,oBAAOG,SAAzB,EAAoC,UAACC,GAAD,EAAMC,OAAN,EAAkB;AACpD,UAAID,GAAJ,EAAS;AACPR,YAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,wBAAT,EAArB;AACD,OAFD,MAEO;AACL,YAAIC,UAAU,mCAAgBJ,OAAhB,EAAd;AACA,0BAAQK,OAAR,CAAgB;AACZC,eAAIN,QAAQO,EADA;AAEZC,gBAAKR,QAAQQ,IAFD;AAGZC,iBAAMT,QAAQS;AAHF,SAAhB,EAIG,UAASN,KAAT,EAAgBO,IAAhB,EAAqB;AACpB,cAAGP,KAAH,EAAS;AACLZ,gBAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAES,QAAQ,EAAEC,MAAM,yDAAR,EAAV,EAArB;AACH,WAFD,MAEM,IAAGF,IAAH,EAAQ;AACVlB;AACH,WAFK,MAED;AACD;AACAD,gBAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,wBAAT,EAArB;AACH;AACJ,SAbD;AAcC;AACF,KApBH;AAsBD,GAvBD,MAuBO;AACLZ,QAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,aAAO;AADY,KAArB;AAGD;AACF,C","file":"authenticate.js","sourcesContent":["import jwt from 'jsonwebtoken';\nimport config from '../config/jwtConfig';\nimport Account from '../models/account';\n\nexport default (req, res, next) => {\n  const authorizationHeader = req.headers['authorization'];\n  let token;\n\n  if (authorizationHeader) {\n    token = authorizationHeader.split(' ')[1];\n  }\n\n  if (token) {\n    jwt.verify(token, config.jwtSecret, (err, decoded) => {\n      if (err) {\n        res.status(401).json({ error: 'Failed to authenticate' });\n      } else {\n        let account = new Account({...decoded});\n        Account.findOne({\n            _id:decoded.id,\n            name:decoded.name,\n            email:decoded.email,\n        }, function(error, data){\n            if(error){\n                res.status(401).json({ errors: { form: 'There is database connection problem, please try again.' } });\n            }else if(data){\n                next();\n            }else{\n                //not found user in server\n                res.status(401).json({ error: 'Failed to authenticate' });\n            }\n        });\n        }\n      }\n    );\n  } else {\n    res.status(403).json({\n      error: 'No token provided'\n    });\n  }\n}"]}