{"version":3,"sources":["../../src/services/postProduct.js"],"names":["router","Router","post","req","res","data","medias","form","IncomingForm","parse","err","fields","files","on","name","file","id","randomBytes","toString","path","thumbnailSaveName","saveName","resize","toFile","info","console","log","push","type","imageName","thumbnailName","field","value","item","save","result","forEach","unlink","media","status","json","postId","_doc","_id","module","exports"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,SAAS,kBAAQC,MAAR,EAAb;AACAD,OAAOE,IAAP,CAAY,cAAZ,EAA4B,iBAAkB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC1D;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEE,QAAMC,OAAO,EAACC,QAAO,EAAR,EAAb;;AAEA,QAAIC,OAAO,IAAI,qBAAWC,YAAf,EAAX;;AAEAD,SAAKE,KAAL,CAAWN,GAAX,EAAgB,UAASO,GAAT,EAAcC,MAAd,EAAsBC,KAAtB,EAA6B;AACzC;AACA;AACH,KAHD,EAICC,EAJD,CAII,WAJJ,EAIiB,UAAUC,IAAV,EAAgBC,IAAhB,EAAqB;AAClC;;AAEJ;AACI,YAAMC,KAAK,iBAAOC,WAAP,CAAmB,EAAnB,EAAuBC,QAAvB,CAAgC,KAAhC,CAAX;AACAH,aAAKI,IAAL,GAAa,uBAASH,EAAtB,CALkC,CAKT;AACzBD,aAAKK,iBAAL,GAAyBJ,KAAG,QAA5B,CANkC,CAMG;AACrCD,aAAKM,QAAL,GAAgBL,EAAhB,CAPkC,CAOf;AACtB,KAZD,EAaCH,EAbD,CAaI,MAbJ,EAaY,UAAUC,IAAV,EAAgBC,IAAhB,EAAqB;AAC7B;AACA,6BAAMA,KAAKI,IAAX,EAAiBG,MAAjB,CAAwB,GAAxB,EAA6B,GAA7B,EAAkCC,MAAlC,CAAyC,uBAASR,KAAKK,iBAAvD,EAA0E,UAACV,GAAD,EAAMc,IAAN;AAAA,mBAAeC,QAAQC,GAAR,CAAYhB,GAAZ,EAAgBc,IAAhB,CAAf;AAAA,SAA1E;AACAnB,aAAKC,MAAL,CAAYqB,IAAZ,CAAiB;AACbC,kBAAKb,KAAKa,IADG;AAEbC,uBAAUd,KAAKM,QAFF;AAGbS,2BAAcf,KAAKK;AAHN,SAAjB;AAKH,KArBD,EAsBCP,EAtBD,CAsBI,OAtBJ,EAsBa,UAASkB,KAAT,EAAgBC,KAAhB,EAAuB;AAChC;AACA3B,aAAK0B,KAAL,IAAcC,KAAd;AACH,KAzBD,EA0BCnB,EA1BD,CA0BI,KA1BJ,EA0BW,YAAW;AAClB,YAAIoB,OAAO,mBAAS5B,IAAT,CAAX;AACA4B,aAAKC,IAAL,CAAU,UAASxB,GAAT,EAAayB,MAAb,EAAoB;AAC1B,gBAAGzB,GAAH,EAAO;AACHL,qBAAKC,MAAL,CAAY8B,OAAZ,CAAoB,iBAAO;AACvB,iCAAGC,MAAH,CAAU,uBAASC,MAAMT,SAAzB,EAAoC,YAAI,CAAE,CAA1C;AACA,iCAAGQ,MAAH,CAAU,uBAASC,MAAMR,aAAzB,EAAwC,YAAI,CAAE,CAA9C;AACH,iBAHD;AAIA1B,oBAAImC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB9B,GAArB,EALG,CAKsB;AAC5B,aAND,MAMK;AACDe,wBAAQC,GAAR,CAAY,qBAAZ;AACAtB,oBAAImC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACD,QAAO,gBAAR,EAAyBE,QAAON,OAAOO,IAAP,CAAYC,GAAZ,CAAgBzB,QAAhB,EAAhC,EAArB;AACH;AACJ,SAXD;AAYH,KAxCD;AAyCH,CA7DD;;AA+DA;AACA0B,OAAOC,OAAP,GAAiB7C,MAAjB","file":"postProduct.js","sourcesContent":["import express from 'express'\nimport authenticate from '../middlewares/authenticate'\nimport formidable from 'formidable'\nimport crypto from 'crypto'\nimport sharp from 'sharp'\nimport Item from '../models/item'\nimport {imageDir} from '../config/pathConfig'\nimport fs from 'fs'\n\n/************************************\n ************* IMPROVE ME ************\n *************************************/\n// 1. Check file type\n//  1.1 if video create thumbnail\n//  1.2 if not image or video throw error\n// 2. Check all image resize completed before save to DB.\n//  2.1 Because it doesn't check for saving resize image, so cannot delete image_small(thumbnail) when insert DB fail\n/*************************************/\n\nlet router = express.Router()\nrouter.post('/postproduct', /*authenticate,*/ (req, res) => {\n  /**************************\n  *** Raw function\n  ****************************/\n  // var data = ''\n\n  // req.on('data', function (chunk) {\n  //   console.log(\"chunk:\",chunk)\n  //   data += chunk\n  // });\n\n  // req.on('end', function () {\n  //   console.log('File uploaded')\n  //   res.status(201).json({ success: true })\n  // })\n  \n    const data = {medias:[]};\n\n    var form = new formidable.IncomingForm()\n\n    form.parse(req, function(err, fields, files) {\n        // console.dir(fields)\n        // console.dir(files)\n    })\n    .on('fileBegin', function (name, file){\n        // before start buffer\n        \n    //   file.path =  imagePath+ file.name\n        const id = crypto.randomBytes(16).toString(\"hex\")\n        file.path =  imageDir+id //tell Formidable the path and name for saving image\n        file.thumbnailSaveName = id+\"_small\" //inject value attach to 'file' envent\n        file.saveName = id // inject value attach to 'file' envent\n    })\n    .on('file', function (name, file){\n        //receive file argument\n        sharp(file.path).resize(320, 240).toFile(imageDir+file.thumbnailSaveName, (err, info) => console.log(err,info) )\n        data.medias.push({\n            type:file.type,\n            imageName:file.saveName,\n            thumbnailName:file.thumbnailSaveName\n        })\n    })\n    .on('field', function(field, value) {\n        //receive field argument\n        data[field] = value;\n    })\n    .on('end', function() {\n        var item = new Item(data)\n        item.save(function(err,result){\n            if(err){\n                data.medias.forEach(media=>{\n                    fs.unlink(imageDir+media.imageName, ()=>{})\n                    fs.unlink(imageDir+media.thumbnailName, ()=>{})\n                })\n                res.status(412).json(err)//db value is not valid\n            }else{\n                console.log(\"Complete save item.\")\n                res.status(200).json({status:\"post complete.\",postId:result._doc._id.toString()})\n            }\n        });\n    });\n});\n\n//export default router;\nmodule.exports = router"]}