{"version":3,"sources":["../../src/services/signup.js"],"names":["express","require","services","Router","Account","bodyParser","email_verfier","use","json","post","req","res","email","body","console","log","type","newAccount","name","password","createTempUser","err","existingPersistentUser","newTempUser","status","send","msg","URL","options","URLFieldName","sendVerificationEmail","info","resendVerificationEmail","accountFound","get","url","params","confirmTempUser","user","sendConfirmationEmail","module","exports"],"mappings":"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","file":"signup.js","sourcesContent":["var express = require('express')\nvar services = express.Router();\nvar Account = require('../models/account.js');\nvar bodyParser = require(\"body-parser\");\nvar email_verfier = require(\"../libs/email_verifier.js\");\n// var stormpath = require('express-stormpath');\n\nservices.use(bodyParser.json());\n\n\nservices.post('/signup',function(req,res){\n\tvar email = req.body.email;\n\tconsole.log(req.body);\n\tif (req.body.type === 'register') {\n\tvar newAccount = new Account({\n\t\tname: req.body.name,\n\t\temail: email,\n\t\tpassword: req.body.password,\n\t});\n\t    email_verfier.createTempUser(newAccount, function(err, existingPersistentUser, newTempUser) {\n      if (err) {\n        return res.status(404).send('ERROR: creating temp user FAILED');\n\n      }\n\n      // user already exists in persistent collection\n      if (existingPersistentUser) {\n        return res.json({\n          msg: 'You have already signed up and confirmed your account. Did you forget your password?'\n        });\n      }\n\n      // new account created\n      if (newTempUser) {\n        var URL = newTempUser[email_verfier.options.URLFieldName];\n\n        email_verfier.sendVerificationEmail(email, URL, function(err, info) {\n          if (err) {\n          \tconsole.log(err);\n            return res.status(404).send('ERROR: sending verification email FAILED');\n          }\n          res.json({\n            msg: 'An email has been sent to you. Please check it to verify your account.',\n            info: info\n          });\n        });\n\n      // user already exists in temporary collection!\n      } else {\n        res.json({\n          msg: 'You have already signed up. Please check your email to verify your account.'\n        });\n      }\n    });\n\n  // resend verification button was clicked\n  } else {\n    email_verfier.resendVerificationEmail(email, function(err, accountFound) {\n      if (err) {\n        return res.status(404).send('ERROR: resending verification email FAILED');\n      }\n      if (accountFound) {\n        res.json({\n          msg: 'An email has been sent to you, yet again. Please check it to verify your account.'\n        });\n      } else {\n        res.json({\n          msg: 'Your verification code has expired. Please sign up again.'\n        });\n      }\n    });\n  }\n});\n\n// user accesses the link that is sent\nservices.get('/verification/:URL', function(req, res) {\n  var url = req.params.URL;\n  email_verfier.confirmTempUser(url, function(err, user) {\n    if (user) {\n      email_verfier.sendConfirmationEmail(user.email, function(err, info) {\n        if (err) {\n        \tconsole.log(err);\n          return res.status(404).send('ERROR: sending confirmation email FAILED');\n        }\n        res.json({\n          msg: 'CONFIRMED!',\n          info: info\n        });\n      });\n    } else {\n      return res.status(404).send('ERROR: confirming temp user FAILED');\n    }\n  });\n});\n\n/*services.get(\"/product\",stormpath.apiAuthenticationRequired,function(req,res){\n  res.json({\"bike\":\"30\"});\n  //res.send(\"test\");\n});*/\n\n\n\nmodule.exports = services\n\n"]}