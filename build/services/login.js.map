{"version":3,"sources":["../../src/services/login.js"],"names":["router","Router","use","json","post","req","res","console","log","body","email","password","findOne","error","data","status","errors","form","account","isCorrectPassword","validPassword","token","sign","id","_id","toString","name","jwtSecret","dir","module","exports"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAIA,SAAS,kBAAQC,MAAR,EAAb;AACAD,OAAOE,GAAP,CAAW,qBAAWC,IAAX,EAAX;;AAGAH,OAAOI,IAAP,CAAY,QAAZ,EAAqB,UAASC,GAAT,EAAaC,GAAb,EAAiB;AAClCC,YAAQC,GAAR,CAAY,gBAAZ,EAA8BH,IAAII,IAAlC;AADkC,oBAENJ,IAAII,IAFE;AAAA,QAE1BC,KAF0B,aAE1BA,KAF0B;AAAA,QAEnBC,QAFmB,aAEnBA,QAFmB;;AAGlC,sBAAQC,OAAR,CAAgB;AACZF,eAAMA;AADM,KAAhB,EAEG,UAASG,KAAT,EAAgBC,IAAhB,EAAqB;AACpB,YAAGD,KAAH,EAAS;AACLP,gBAAIS,MAAJ,CAAW,GAAX,EAAgBZ,IAAhB,CAAqB,EAAEa,QAAQ,EAAEC,MAAM,yDAAR,EAAV,EAArB;AACA;AACH,SAHD,MAGM,IAAGH,IAAH,EAAQ;AACV,gBAAII,UAAU,sBAAYJ,IAAZ,CAAd;AACA,gBAAIK,oBAAoBD,QAAQE,aAAR,CAAsBT,QAAtB,CAAxB;AACA;AACA,gBAAGQ,iBAAH,EAAqB;AACjB,oBAAME,QAAQ,uBAAIC,IAAJ,CAAS;AACnBC,wBAAIL,QAAQM,GAAR,CAAYC,QAAZ,EADe;AAEnBC,0BAAMR,QAAQQ,IAFK;AAGnBhB,2BAAOQ,QAAQR;AAHI,iBAAT,EAIX,oBAAOiB,SAJI,CAAd;AAKApB,wBAAQqB,GAAR,CAAYV,QAAQM,GAAR,CAAYC,QAAZ,EAAZ;AACAnB,oBAAIH,IAAJ,CAAS,EAAEkB,YAAF,EAAT;AACH,aARD,MAQK;AACDf,oBAAIS,MAAJ,CAAW,GAAX,EAAgBZ,IAAhB,CAAqB,EAAEa,QAAQ,EAAEC,MAAM,qBAAR,EAAV,EAArB;AACH;AACJ,SAfK,MAeD;AACDX,gBAAIS,MAAJ,CAAW,GAAX,EAAgBZ,IAAhB,CAAqB,EAAEa,QAAQ,EAAEC,MAAM,mBAAR,EAAV,EAArB;AACH;AACJ,KAxBD;AAyBH,CA5BD;;AA8BA;AACAY,OAAOC,OAAP,GAAiB9B,MAAjB","file":"login.js","sourcesContent":["import express from 'express';\nimport bodyParser from \"body-parser\";\nimport Account from '../models/account';\nimport bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\nimport config from '../config/jwtConfig';\n\nlet router = express.Router();\nrouter.use(bodyParser.json());\n\n\nrouter.post('/login',function(req,res){\n    console.log(\"services/login\", req.body);\n    const { email, password } = req.body;\n    Account.findOne({\n        email:email\n    }, function(error, data){\n        if(error){\n            res.status(500).json({ errors: { form: 'There is database connection problem, please try again.' } });\n            return;\n        }else if(data){\n            var account = new Account(data);\n            var isCorrectPassword = account.validPassword(password);\n            //check hash password\n            if(isCorrectPassword){\n                const token = jwt.sign({\n                    id: account._id.toString(),\n                    name: account.name,\n                    email: account.email\n                }, config.jwtSecret);\n                console.dir(account._id.toString());\n                res.json({ token });\n            }else{\n                res.status(401).json({ errors: { form: 'Password incorrect.' } });\n            }\n        }else{\n            res.status(401).json({ errors: { form: 'Cannot find user.' } });\n        }\n    });\n});\n\n//can not use [export default] because the server.js use recursive require()\nmodule.exports = router;\n\n\n\n\n\n\n\n\n"]}